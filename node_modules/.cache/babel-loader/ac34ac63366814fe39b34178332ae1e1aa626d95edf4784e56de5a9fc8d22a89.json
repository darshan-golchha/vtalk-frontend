{"ast":null,"code":"var _jsxFileName = \"/Users/darshan/Documents/VTalk/vtalk_frontend/src/components/RoomSelection.js\",\n  _s = $RefreshSig$();\n// RoomSelection.js\nimport React, { useEffect, useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Link } from 'react-router-dom';\nimport UserRegister from '../components/UserRegistration';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomSelection = username => {\n  _s();\n  const [rooms, setRooms] = useState([]);\n  const [roomCode, setRoomCode] = useState('');\n  const [roomDescription, setRoomDescription] = useState('');\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  var stompClient = null;\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  const onConnected = () => {\n    stompClient.subscribe('/topic/public', onRoomsReceived);\n  };\n  const handleRoomSelected = roomCode => {\n    // Redirect to the chat page with the selected room and username\n    // For simplicity, assuming you have a default username for now\n    const username = 'defaultUsername'; // Replace with the actual username\n    window.location.href = `/chat/${roomCode}/${username}`;\n  };\n  const onRoomsReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n    setRooms(payloadData);\n    console.log(payloadData);\n  };\n  useEffect(() => {\n    connect();\n  }, []);\n  const handleCreateRoom = () => {\n    stompClient.send(\"/app/createRoom\", {}, JSON.stringify({\n      description: roomDescription\n    }));\n    const username = 'VtalkUser'; // Replace with the actual username\n    window.location.href = `/chat/${roomCode}/${username}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-selection\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choose or Create a Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter room description\",\n      value: roomDescription,\n      onChange: e => setRoomDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleCreateRoom,\n      children: \"Create Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Available Rooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: rooms.map(room => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => handleRoomSelected(room.roomCode),\n          children: \"Select Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, room.roomCode, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(RoomSelection, \"8FPNAahAtyxeXZUV2Wu6908qXfo=\");\n_c = RoomSelection;\nexport default RoomSelection;\nvar _c;\n$RefreshReg$(_c, \"RoomSelection\");","map":{"version":3,"names":["React","useEffect","useState","SockJS","Link","UserRegister","jsxDEV","_jsxDEV","RoomSelection","username","_s","rooms","setRooms","roomCode","setRoomCode","roomDescription","setRoomDescription","userData","setUserData","receivername","connected","message","stompClient","connect","Sock","over","onConnected","onError","err","console","log","subscribe","onRoomsReceived","handleRoomSelected","window","location","href","payload","payloadData","JSON","parse","body","handleCreateRoom","send","stringify","description","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","room","_c","$RefreshReg$"],"sources":["/Users/darshan/Documents/VTalk/vtalk_frontend/src/components/RoomSelection.js"],"sourcesContent":["// RoomSelection.js\nimport React, { useEffect, useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Link } from 'react-router-dom';\nimport UserRegister from '../components/UserRegistration';\n\nconst RoomSelection = (username) => {\n  const [rooms, setRooms] = useState([]);\n  const [roomCode, setRoomCode] = useState('');\n  const [roomDescription, setRoomDescription] = useState('');\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n\n  var stompClient = null;\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  }\n\n  const onError = (err) => {\n    console.log(err);\n\n  }\n  const onConnected = () => {\n    stompClient.subscribe('/topic/public', onRoomsReceived);\n  }\n\n  const handleRoomSelected = (roomCode) => {\n    // Redirect to the chat page with the selected room and username\n    // For simplicity, assuming you have a default username for now\n    const username = 'defaultUsername'; // Replace with the actual username\n    window.location.href = `/chat/${roomCode}/${username}`;\n  };\n\n  const onRoomsReceived = (payload) => {\n    var payloadData = JSON.parse(payload.body);\n    setRooms(payloadData);\n    console.log(payloadData);\n  }\n\n  useEffect(() => {\n    connect();\n  }, []);\n\n  const handleCreateRoom = () => {\n    stompClient.send(\"/app/createRoom\", {}, JSON.stringify({description : roomDescription}));\n    const username = 'VtalkUser'; // Replace with the actual username\n    window.location.href = `/chat/${roomCode}/${username}`;\n  }\n\n  return (\n    <div className=\"room-selection\">\n      <h2>Choose or Create a Chat Room</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter room description\"\n        value={roomDescription}\n        onChange={(e) => setRoomDescription(e.target.value)}\n      />\n      <button type=\"button\" onClick={handleCreateRoom}>\n        Create Room\n      </button>\n      <h3>Available Rooms</h3>\n      <ul>\n        {rooms.map((room) => (\n          <li key={room.roomCode}>\n            {/* Render the room information (e.g., room name, description) */}\n            {/* Allow the user to select the room */}\n            <button type=\"button\" onClick={() => handleRoomSelected(room.roomCode)}>\n              Select Room\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default RoomSelection;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}