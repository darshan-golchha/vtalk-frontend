{"ast":null,"code":"var _jsxFileName = \"/Users/darshan/Documents/VTalk/vtalk_frontend/src/components/RoomSelection.js\",\n  _s = $RefreshSig$();\n// RoomSelection.js\nimport React, { useEffect, useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomSelection = username => {\n  _s();\n  const [rooms, setRooms] = useState([]);\n  const [roomDescription, setRoomDescription] = useState('');\n  const [roomCode, setRoomCode] = useState('');\n  let stompClient = null; // Declare stompClient here\n\n  useEffect(() => {\n    connect();\n  }, []);\n  const connect = () => {\n    const Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n    function onConnected() {\n      console.log('Connected!');\n      stompClient.subscribe('/topic/public', onRoomsReceived);\n    }\n    function onError(err) {\n      console.log('Error:', err);\n    }\n  };\n  const onRoomsReceived = payload => {\n    const payloadData = JSON.parse(payload.body);\n    setRooms(payloadData);\n  };\n  const handleCreateRoom = () => {\n    // Ensure roomDescription is not empty before creating a room\n    if (roomDescription.trim() !== '') {\n      if (stompClient && stompClient.connected) {\n        // stompClient is connected, send the message\n        stompClient.send('/app/createRoom', {}, JSON.stringify({\n          description: roomDescription\n        }));\n        // Assuming you have a default username for now\n        const username = 'defaultUsername';\n        window.location.href = `/chat/${roomCode}/${username}`;\n      } else {\n        // stompClient is not connected, show an error or attempt to connect\n        console.error('WebSocket connection not established');\n        // You can attempt to connect here or show an error to the user\n        // Example: connect();\n      }\n    }\n  };\n\n  const handleRoomSelected = roomCode => {\n    // Redirect to the chat page with the selected room and username\n    // For simplicity, assuming you have a default username for now\n    const uname = username;\n    setRoomCode(roomCode);\n    window.location.href = `/chat/${roomCode}/${uname}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-selection\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choose or Create a Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter room description\",\n      value: roomDescription,\n      onChange: e => setRoomDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleCreateRoom,\n      children: \"Create Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Available Rooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: rooms.map(room => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => handleRoomSelected(room.roomCode),\n          children: \"Select Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, room.roomCode, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(RoomSelection, \"2T2iSbHaY1iWCwKPouHN8hB267c=\");\n_c = RoomSelection;\nexport default RoomSelection;\nvar _c;\n$RefreshReg$(_c, \"RoomSelection\");","map":{"version":3,"names":["React","useEffect","useState","SockJS","over","Link","jsxDEV","_jsxDEV","RoomSelection","username","_s","rooms","setRooms","roomDescription","setRoomDescription","roomCode","setRoomCode","stompClient","connect","Sock","onConnected","onError","console","log","subscribe","onRoomsReceived","err","payload","payloadData","JSON","parse","body","handleCreateRoom","trim","connected","send","stringify","description","window","location","href","error","handleRoomSelected","uname","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","room","_c","$RefreshReg$"],"sources":["/Users/darshan/Documents/VTalk/vtalk_frontend/src/components/RoomSelection.js"],"sourcesContent":["// RoomSelection.js\nimport React, { useEffect, useState } from 'react';\nimport SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { Link } from 'react-router-dom';\n\nconst RoomSelection = (username) => {\n  const [rooms, setRooms] = useState([]);\n  const [roomDescription, setRoomDescription] = useState('');\n  const [roomCode, setRoomCode] = useState('');\n  let stompClient = null; // Declare stompClient here\n\n  useEffect(() => {\n    connect();\n  }, []);\n\n  const connect = () => {\n    const Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n\n    function onConnected() {\n      console.log('Connected!');\n      stompClient.subscribe('/topic/public', onRoomsReceived);\n    }\n\n    function onError(err) {\n      console.log('Error:', err);\n    }\n  };\n\n  const onRoomsReceived = (payload) => {\n    const payloadData = JSON.parse(payload.body);\n    setRooms(payloadData);\n  };\n\n  const handleCreateRoom = () => {\n    // Ensure roomDescription is not empty before creating a room\n    if (roomDescription.trim() !== '') {\n      if (stompClient && stompClient.connected) {\n        // stompClient is connected, send the message\n        stompClient.send('/app/createRoom', {}, JSON.stringify({ description: roomDescription }));\n        // Assuming you have a default username for now\n        const username = 'defaultUsername';\n        window.location.href = `/chat/${roomCode}/${username}`;\n      } else {\n        // stompClient is not connected, show an error or attempt to connect\n        console.error('WebSocket connection not established');\n        // You can attempt to connect here or show an error to the user\n        // Example: connect();\n      }\n    }\n  };  \n\n  const handleRoomSelected = (roomCode) => {\n    // Redirect to the chat page with the selected room and username\n    // For simplicity, assuming you have a default username for now\n    const uname = username;\n    setRoomCode(roomCode);\n    window.location.href = `/chat/${roomCode}/${uname}`;\n  };\n\n  return (\n    <div className=\"room-selection\">\n      <h2>Choose or Create a Chat Room</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter room description\"\n        value={roomDescription}\n        onChange={(e) => setRoomDescription(e.target.value)}\n      />\n      <button type=\"button\" onClick={handleCreateRoom}>\n        Create Room\n      </button>\n      <h3>Available Rooms</h3>\n      <ul>\n        {rooms.map((room) => (\n          <li key={room.roomCode}>\n            <button type=\"button\" onClick={() => handleRoomSelected(room.roomCode)}>\n              Select Room\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default RoomSelection;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}