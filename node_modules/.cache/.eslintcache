[{"/Users/darshan/Documents/VTalk/vtalk_frontend/src/index.js":"1","/Users/darshan/Documents/VTalk/vtalk_frontend/src/App.js":"2","/Users/darshan/Documents/VTalk/vtalk_frontend/src/components/ChatRoom.js":"3","/Users/darshan/Documents/VTalk/vtalk_frontend/src/components/UserRegistration.js":"4","/Users/darshan/Documents/VTalk/vtalk_frontend/src/components/RoomSelection.js":"5","/Users/darshan/Documents/VTalk/vtalk_frontend/src/components/Loader.js":"6","/Users/darshan/VTalk/frontend/src/index.js":"7","/Users/darshan/VTalk/frontend/src/App.js":"8","/Users/darshan/VTalk/frontend/src/components/RoomSelection.js":"9","/Users/darshan/VTalk/frontend/src/components/Loader.js":"10","/Users/darshan/VTalk/frontend/src/components/UserRegistration.js":"11","/Users/darshan/VTalk/frontend/src/components/ChatRoom.js":"12"},{"size":220,"mtime":1704801110837,"results":"13","hashOfConfig":"14"},{"size":728,"mtime":1704343399633,"results":"15","hashOfConfig":"14"},{"size":7907,"mtime":1706460909726,"results":"16","hashOfConfig":"14"},{"size":2249,"mtime":1706734989880,"results":"17","hashOfConfig":"14"},{"size":5321,"mtime":1706741207816,"results":"18","hashOfConfig":"14"},{"size":1043,"mtime":1704342428839,"results":"19","hashOfConfig":"14"},{"size":220,"mtime":1704801110837,"results":"20","hashOfConfig":"21"},{"size":728,"mtime":1704343399633,"results":"22","hashOfConfig":"21"},{"size":7103,"mtime":1719212769994,"results":"23","hashOfConfig":"24"},{"size":1043,"mtime":1715452723340,"results":"25","hashOfConfig":"21"},{"size":2225,"mtime":1719211972970,"results":"26","hashOfConfig":"24"},{"size":7887,"mtime":1719211947059,"results":"27","hashOfConfig":"24"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13og8n7",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12aofa6",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1vy06fs",{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/darshan/Documents/VTalk/vtalk_frontend/src/index.js",[],[],"/Users/darshan/Documents/VTalk/vtalk_frontend/src/App.js",[],[],"/Users/darshan/Documents/VTalk/vtalk_frontend/src/components/ChatRoom.js",["66","67","68","69","70","71"],[],"import React, { useEffect, useState, useRef } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport '../css/chatroom.css';\nimport { useLoadingContext } from '../components/Loader';\nimport { IoSendSharp } from \"react-icons/io5\";\nimport { IoExit } from \"react-icons/io5\";\n\nvar stompClient = null;\n\nconst ChatPage = () => {\n  const { isLoading, setLoading, disableAllInputs, enableAllInputs } = useLoadingContext();\n  const location = useLocation();\n  const user = location.state?.user;\n  const [publicChats, setPublicChats] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [userData, setUserData] = useState({ \"message\": \"\", \"connected\": false });\n  const [username, setUsername] = useState(user.fullName);\n  const [roomCode, setRoomCode] = useState(user.roomCode);\n  const navigate = useNavigate();\n  const chatMessagesRef = useRef(null);\n  const [label, setLabel] = useState('Room Label');\n  const [userId, setUserId] = useState(user.userId);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (!user) {\n      leaveChatroom();\n    }\n    if (roomCode) {\n      connect();\n    }\n\n    // Set up beforeunload event listener\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    // Cleanup event listener on component unmount\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [roomCode]);\n\n  const handleBeforeUnload = () => {\n    axios\n      .get('http://10.140.254.17:8080/deleteUser?id=' + user.userId)\n      .catch((err) => {\n        console.error(err);\n      });\n    leaveChatroom();\n  };\n\n  const connect = () => {\n    let Sock = new SockJS('http://10.140.254.17:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    // Getting previous chats of the room\n    axios\n      .get('http://10.140.254.17:8080/chats?roomcode=' + roomCode)\n      .then((res) => {\n        setPublicChats(res.data);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n    stompClient.send(`/app/user/connectUser`, {}, JSON.stringify(user));\n    stompClient.subscribe(`/user/vtalk/messages/${roomCode}`, onMessageReceived);\n    axios\n      .get('http://10.140.254.17:8080/roomLabel' + '?roomcode=' + roomCode)\n      .then((res) => {\n        setLabel(res.data);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n    setRoomCode(user.roomCode);\n  };\n\n  const onMessageReceived = (payload) => {\n    var payloadData = JSON.parse(payload.body);\n    setPublicChats((prevChats) => [...prevChats, payloadData]);\n\n    // Scroll to the bottom of the chatMessagesRef on new message\n    if (chatMessagesRef.current) {\n      const lastMessage = chatMessagesRef.current.lastChild;\n      lastMessage.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  const onError = (err) => {\n    console.log(err);\n  };\n\n  const handleMessage = (event) => {\n    const { value } = event.target;\n    setUserData({ ...userData, \"message\": value });\n  };\n\n  const sendValue = (event) => {\n    event.preventDefault();\n    setUserData({ ...userData, \"connected\": true });\n    setLoading(true);\n    disableAllInputs();\n    if (stompClient && userData.message) {\n      var chatMessage = {\n        fullName: username,\n        roomCode: roomCode,\n        senderId: user.userId,\n        content: userData.message,\n        timestamp: new Date(),\n      };\n      stompClient.send(`/app/chat`, {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData, \"message\": \"\" });\n    }\n    setLoading(false);\n    enableAllInputs();\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [publicChats]);\n\n  const leaveChatroom = () => {\n    setLoading(true);\n    disableAllInputs();\n    if (stompClient) {\n      stompClient.send(`/app/user/disconnectUser`, {}, JSON.stringify(user));\n      setUserData({ ...userData, \"connected\": false });\n      axios\n        .get('http://10.140.254.17:8080/leaveRoom?roomcode=' + roomCode + '&userid=' + userId)\n        .then((res) => {\n          setLoading(false);\n          enableAllInputs();\n          navigate(`/rooms`, { state: { user: res.data } });\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n  };\n\n  const getDateStampText = (dateString) => {\n    const today = new Date().toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' });\n    const yesterday = new Date(Date.now() - 86400000).toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' });\n\n    if (dateString === today) {\n      return 'Today';\n    } else if (dateString === yesterday) {\n      return 'Yesterday';\n    } else {\n      return dateString;\n    }\n  };\n\n\n  return (\n    <div className='chat-window'>\n\n      <div className=\"chat-box\">\n        {isLoading && <div className=\"loader\">Leaving The Chat Room...</div>}\n        <div className='chat-top'>\n          <div className=\"room-label\">{label}</div>\n          <IoExit className='leave-button' onClick={leaveChatroom} />\n        </div>\n        <div className=\"chat-content\" ref={chatMessagesRef}>\n          {publicChats.map((chat, index, chats) => {\n            // Get the date string in \"YYYY-MM-DD\" format\n            const currentDate = new Date(chat.timestamp).toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' });\n\n            // Check if the current message has a different date than the previous one\n            const showDateStamp = index === 0 || currentDate !== new Date(chats[index - 1].timestamp).toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' });\n\n            return (\n              <React.Fragment key={index}>\n                {showDateStamp && (\n                  <div className=\"message notification date-stamp\">\n                    <p>{getDateStampText(currentDate)}</p>\n                  </div>\n                )}\n\n                <div className={`message ${chat.senderId === userId ? \"self\" : \"\"} ${chat.fullName ? \"\" : \"notification\"}`} key={index}>\n                  {chat.fullName && chat.senderId !== userId && <div className=\"avatar\">{chat.fullName[0].toUpperCase()}</div>}\n                  <div className=\"message-data\">\n                    <div>\n                      {chat.fullName ? (\n                        <div className='content-message'>\n                          <p className='message-fullname'>{chat.fullName}</p>\n                          <p>{chat.content}</p>\n                          <p className=\"message-time\">\n                            {new Date(chat.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })}\n                          </p>\n                        </div>\n                      ) : (\n                        <p className=\"notification\">{chat.content}</p>\n                      )}\n                    </div>\n                  </div>\n                  {chat.fullName && chat.senderId === userId && <div className=\"avatar\">{chat.fullName[0].toUpperCase()}</div>}\n                </div>\n              </React.Fragment>\n            );\n          })}\n        </div>\n\n        <form onSubmit={sendValue} className='chat-form'>\n          <div className=\"send-message\">\n            <input\n              type=\"text\"\n              className=\"input-message\"\n              placeholder=\"Enter your message...\"\n              value={userData.message}\n              onChange={handleMessage}\n              onSubmit={sendValue}\n              ref={inputRef}\n            />\n            <IoSendSharp className='send-button' onClick={sendValue} />\n            {/* <button className='send-button' onClick={sendValue}>Send</button> */}\n          </div>\n        </form>\n      </div>\n\n    </div>\n\n  );\n};\n\nexport default ChatPage;\n","/Users/darshan/Documents/VTalk/vtalk_frontend/src/components/UserRegistration.js",["72","73","74","75"],[],"/Users/darshan/Documents/VTalk/vtalk_frontend/src/components/RoomSelection.js",["76","77","78","79","80","81"],[],"/Users/darshan/Documents/VTalk/vtalk_frontend/src/components/Loader.js",["82"],[],"import React, { createContext, useContext, useRef } from 'react';\n\nconst LoadingContext = createContext();\n\nconst useLoading = () => {\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const setLoading = (loading) => {\n    setIsLoading(loading);\n  };\n\n  const disableAllInputs = () => {\n    const inputElements = document.querySelectorAll('input, button, select, textarea');\n    inputElements.forEach((element) => {\n      element.disabled = true;\n    });\n  };\n\n  const enableAllInputs = () => {\n    const inputElements = document.querySelectorAll('input, button, select, textarea');\n    inputElements.forEach((element) => {\n      element.disabled = false;\n    });\n  };\n\n  return {\n    isLoading,\n    setLoading,\n    disableAllInputs,\n    enableAllInputs,\n  };\n};\n\nexport const LoadingProvider = ({ children }) => {\n  const loading = useLoading();\n\n  return (\n    <LoadingContext.Provider value={loading}>{children}</LoadingContext.Provider>\n  );\n};\n\nexport const useLoadingContext = () => {\n  return useContext(LoadingContext);\n};\n","/Users/darshan/VTalk/frontend/src/index.js",[],[],"/Users/darshan/VTalk/frontend/src/App.js",[],[],"/Users/darshan/VTalk/frontend/src/components/RoomSelection.js",["83","84","85","86","87","88"],[],"/Users/darshan/VTalk/frontend/src/components/Loader.js",["89"],[],"/Users/darshan/VTalk/frontend/src/components/UserRegistration.js",["90","91"],[],"/Users/darshan/VTalk/frontend/src/components/ChatRoom.js",["92","93","94","95","96","97"],[],{"ruleId":"98","severity":1,"message":"99","line":18,"column":10,"nodeType":"100","messageId":"101","endLine":18,"endColumn":15},{"ruleId":"98","severity":1,"message":"102","line":18,"column":17,"nodeType":"100","messageId":"101","endLine":18,"endColumn":25},{"ruleId":"98","severity":1,"message":"103","line":20,"column":20,"nodeType":"100","messageId":"101","endLine":20,"endColumn":31},{"ruleId":"98","severity":1,"message":"104","line":25,"column":18,"nodeType":"100","messageId":"101","endLine":25,"endColumn":27},{"ruleId":"105","severity":1,"message":"106","line":43,"column":6,"nodeType":"107","endLine":43,"endColumn":16,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":73,"column":50,"nodeType":"111","messageId":"112","endLine":73,"endColumn":51},{"ruleId":"98","severity":1,"message":"113","line":6,"column":10,"nodeType":"100","messageId":"101","endLine":6,"endColumn":24},{"ruleId":"98","severity":1,"message":"114","line":35,"column":9,"nodeType":"100","messageId":"101","endLine":35,"endColumn":20},{"ruleId":"98","severity":1,"message":"115","line":41,"column":9,"nodeType":"100","messageId":"101","endLine":41,"endColumn":20},{"ruleId":"116","severity":1,"message":"117","line":70,"column":9,"nodeType":"118","endLine":70,"endColumn":75},{"ruleId":"98","severity":1,"message":"119","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":14},{"ruleId":"98","severity":1,"message":"120","line":16,"column":10,"nodeType":"100","messageId":"101","endLine":16,"endColumn":18},{"ruleId":"98","severity":1,"message":"103","line":16,"column":20,"nodeType":"100","messageId":"101","endLine":16,"endColumn":31},{"ruleId":"98","severity":1,"message":"121","line":21,"column":10,"nodeType":"100","messageId":"101","endLine":21,"endColumn":20},{"ruleId":"105","severity":1,"message":"122","line":35,"column":6,"nodeType":"107","endLine":35,"endColumn":8,"suggestions":"123"},{"ruleId":"109","severity":1,"message":"110","line":39,"column":51,"nodeType":"111","messageId":"112","endLine":39,"endColumn":52},{"ruleId":"98","severity":1,"message":"124","line":1,"column":44,"nodeType":"100","messageId":"101","endLine":1,"endColumn":50},{"ruleId":"98","severity":1,"message":"119","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":14},{"ruleId":"98","severity":1,"message":"120","line":16,"column":10,"nodeType":"100","messageId":"101","endLine":16,"endColumn":18},{"ruleId":"98","severity":1,"message":"103","line":16,"column":20,"nodeType":"100","messageId":"101","endLine":16,"endColumn":31},{"ruleId":"98","severity":1,"message":"121","line":21,"column":10,"nodeType":"100","messageId":"101","endLine":21,"endColumn":20},{"ruleId":"105","severity":1,"message":"122","line":36,"column":6,"nodeType":"107","endLine":36,"endColumn":8,"suggestions":"125"},{"ruleId":"109","severity":1,"message":"110","line":40,"column":47,"nodeType":"111","messageId":"112","endLine":40,"endColumn":48},{"ruleId":"98","severity":1,"message":"124","line":1,"column":44,"nodeType":"100","messageId":"101","endLine":1,"endColumn":50},{"ruleId":"98","severity":1,"message":"113","line":6,"column":10,"nodeType":"100","messageId":"101","endLine":6,"endColumn":24},{"ruleId":"116","severity":1,"message":"117","line":70,"column":9,"nodeType":"118","endLine":70,"endColumn":75},{"ruleId":"98","severity":1,"message":"99","line":18,"column":10,"nodeType":"100","messageId":"101","endLine":18,"endColumn":15},{"ruleId":"98","severity":1,"message":"102","line":18,"column":17,"nodeType":"100","messageId":"101","endLine":18,"endColumn":25},{"ruleId":"98","severity":1,"message":"103","line":20,"column":20,"nodeType":"100","messageId":"101","endLine":20,"endColumn":31},{"ruleId":"98","severity":1,"message":"104","line":25,"column":18,"nodeType":"100","messageId":"101","endLine":25,"endColumn":27},{"ruleId":"105","severity":1,"message":"106","line":43,"column":6,"nodeType":"107","endLine":43,"endColumn":16,"suggestions":"126"},{"ruleId":"109","severity":1,"message":"110","line":73,"column":46,"nodeType":"111","messageId":"112","endLine":73,"endColumn":47},"no-unused-vars","'users' is assigned a value but never used.","Identifier","unusedVar","'setUsers' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'setUserId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connect', 'handleBeforeUnload', 'leaveChatroom', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["127"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'IoRefreshSharp' is defined but never used.","'deleteChats' is assigned a value but never used.","'deleteRooms' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Link' is defined but never used.","'username' is assigned a value but never used.","'isCreating' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleBeforeUnload' and 'handleRoomRecieved'. Either include them or remove the dependency array.",["128"],"'useRef' is defined but never used.",["129"],["130"],{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"133","fix":"135"},{"desc":"131","fix":"136"},"Update the dependencies array to be: [connect, handleBeforeUnload, leaveChatroom, roomCode, user]",{"range":"137","text":"138"},"Update the dependencies array to be: [handleBeforeUnload, handleRoomRecieved]",{"range":"139","text":"140"},{"range":"141","text":"140"},{"range":"142","text":"138"},[1487,1497],"[connect, handleBeforeUnload, leaveChatroom, roomCode, user]",[1336,1338],"[handleBeforeUnload, handleRoomRecieved]",[1384,1386],[1487,1497]]